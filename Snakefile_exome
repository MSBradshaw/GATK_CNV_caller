############################################################
#SV-EXOME, a snakefile for calling CNVs in exome with GATK4#
############################################################

import os
import json
import glob

#Get PATHS from config file
workdir: config['SV-EXOME_DIR']
OUTPUT_DIR = config['OUTPUT_DIR']

# Get paths of required reference files
REFERENCEGENOME = config["HG_PATH"]
HGDICT = config["DICT_PATH"]
BED = config["BED_PATH"]
OMIM = config['SV-EXOME_DIR']+"/ref/OMIM_gene_patho.txt"
REFSEQ = config['SV-EXOME_DIR']+"/ref/hg19_refGene.txt"
GNOMAD = config['SV-EXOME_DIR']+"/ref/gnomAD_gene_pLI.txt"

# Get run mode parameters
MODE = config["MODE"]
if MODE == "CASE":
    MODEL_DIR = config["GERMLINE_MODEL_PATH"]
    PLOIDY_DIR = config["PLOIDY_MODEL_PATH"]
    DATABASE_PATH = config["DATABASE_PATH"]
elif MODE == "COHORT":
    MODEL_DIR = OUTPUT_DIR+"/cohort_germline_calling"
    PLOIDY_DIR = OUTPUT_DIR+"/ploidy-calls_chr"
    DATABASE_PATH = OUTPUT_DIR+"/database_sorted.tab"
else:
    exit("MODE OF CALLING SHOULD BE: CASE or COHORT")

# Get sample name information
SAMPLES_DIR = config["SAMPLES_PATH"]

SAMPLES_GLOB = glob.glob(SAMPLES_DIR+"/*am")

if config["SAMPLE_LIST"]:
    SAMPLE_LIST = config["SAMPLE_LIST"].split(',')

SAMPLES_NAME = []
# Check if samples have a valid extension and make a list of the names of the sample names
for i in SAMPLES_GLOB:
    if not (i.endswith(".bam") or i.endswith(".cram")):
        print(i+" has not a valid extension. It should be a .bam or .cram file") 
        exit()
    else:
        name_samp = i.split("/")[-1].replace(".cram","").replace(".bam","").split(config["SAMPLE_SEPARATOR"])[int(config["SAMPLE_INDEX"])]
        if config["SAMPLE_LIST"]:
            if name_samp in SAMPLE_LIST:
                SAMPLES_NAME.append(name_samp)
        else:
            SAMPLES_NAME.append(name_samp)

SCATTER = ["temp_0001_of_4","temp_0002_of_4","temp_0003_of_4","temp_0004_of_4"]

#CHROMOSOME = ["chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chrX", "chrY"]



### RULES ### 

rule target:
    input: expand(OUTPUT_DIR+"/COUNTS/count.{sample}.tsv", sample=SAMPLES_NAME,), expand(OUTPUT_DIR+"/INTERVALS/scatter/{scatter}/scattered.interval_list", scatter = SCATTER,), OUTPUT_DIR+"/ploidy-calls_chr",  expand(OUTPUT_DIR+"/cohort_germline_calling/{fragment}-calls", fragment = SCATTER,), expand(OUTPUT_DIR+"/VCF/{sample}.segments.vcf.gz", sample=SAMPLES_NAME,), expand(OUTPUT_DIR+"/VCF/{sample}.segments_filtered.vcf.gz", sample=SAMPLES_NAME,), OUTPUT_DIR+"/all_cnv_calls_anno.tab"

rule MAKE_INTERVALS:
    input: ref = REFERENCEGENOME, bed = BED 
    output: OUTPUT_DIR+"/INTERVALS/interval_whole_exome.interval_list"
    conda : "envs/gatkcondaenv.yml"
    shell:
        """
        gatk --java-options "-Xmx{config[JAVA_ARGS][MAX_MEMORY]} -Djava.io.tmpdir={config[TEMP_DIR]}" PreprocessIntervals \
        -R {input.ref} \
	    -L {input.bed} \
        --interval-merging-rule OVERLAPPING_ONLY \
        -O {output}
        """

def get_name(wildcards):
    for i in SAMPLES_GLOB:
       if list({wildcards.sample})[0] in i:
            return { "ALIGN" : i }
    
rule COLLECT_READCOUNT:
    input: unpack(get_name), interval = OUTPUT_DIR+"/INTERVALS/interval_whole_exome.interval_list"
    params: ref = REFERENCEGENOME
    output: samp = OUTPUT_DIR+"/COUNTS/count.{sample}.tsv"
    conda : "envs/gatkcondaenv.yml"
    shell: """
	export MKL_NUM_THREADS=1
	export OMP_NUM_THREADS=1
	gatk --java-options "-Xmx{config[JAVA_ARGS][MAX_MEMORY]} -Djava.io.tmpdir={config[TEMP_DIR]}" CollectReadCounts --disable-read-filter WellformedReadFilter -R {params.ref} -I {input.ALIGN} -L {input.interval} -imr OVERLAPPING_ONLY --format TSV -O {output}
	"""

rule ANNOTATE_INTERVALS:
    input: interval = OUTPUT_DIR+"/INTERVALS/interval_whole_exome.interval_list", ref = REFERENCEGENOME
    output: OUTPUT_DIR+"/INTERVALS/whole_exome_annotated_intervals.tsv"
    conda : "envs/gatkcondaenv.yml"
    shell:"""
    gatk --java-options "-Xmx{config[JAVA_ARGS][MAX_MEMORY]} -Djava.io.tmpdir={config[TEMP_DIR]}" AnnotateIntervals -L {input.interval} -R {input.ref} -imr OVERLAPPING_ONLY -O {output}
    """


rule FILTER_INTERVALS:
    input: interval = OUTPUT_DIR+"/INTERVALS/interval_whole_exome.interval_list", count = expand(OUTPUT_DIR+"/COUNTS/count.{sample}.tsv", sample=SAMPLES_NAME,), annotated = OUTPUT_DIR+"/INTERVALS/whole_exome_annotated_intervals.tsv"
    output: OUTPUT_DIR+"/INTERVALS/whole_exome_cohort_gccontent.filtered.interval_list"
    conda : "envs/gatkcondaenv.yml"
    shell:"""
	a=""
	for i in {input.count}; do a=$a" -I "$i; done
	gatk --java-options "-Xmx{config[JAVA_ARGS][MAX_MEMORY]} -Djava.io.tmpdir={config[TEMP_DIR]}" FilterIntervals -L {input.interval} --annotated-intervals {input.annotated} $a -imr OVERLAPPING_ONLY -O {output} 
	"""

def PLOIDY_PARAM(wildcards):
    if MODE == "CASE":
        return { "in" : "--model "+PLOIDY_DIR, "prefix" : "ploidy" }
    elif MODE == "COHORT":
        return { "in" : "-L "+OUTPUT_DIR+"/INTERVALS/whole_exome_cohort_gccontent.filtered.interval_list --contig-ploidy-priors conf/contig_ploidy_priors.tsv", "prefix" : "ploidy" }

rule PLOIDY:
    input: tsv = expand(OUTPUT_DIR+"/COUNTS/count.{sample}.tsv", sample=SAMPLES_NAME,)
    output: directory(OUTPUT_DIR+"/ploidy-calls_chr")
    params: p=PLOIDY_PARAM
    conda: "envs/gatkcondaenv.yml"
    shell: """
	export MKL_NUM_THREADS={config[GATK][MAX_THREADS]}
	export OMP_NUM_THREADS={config[GATK][MAX_THREADS]}
	a=""
	for i in {input.tsv}; do a=$a" -I "$i; done
	gatk --java-options "-Xmx{config[JAVA_ARGS][MAX_MEMORY]} -Djava.io.tmpdir={config[TEMP_DIR]}" DetermineGermlineContigPloidy {params.p[in]} $a --imr OVERLAPPING_ONLY --output {output} --output-prefix {params.p[prefix]}
	"""

rule SCATTER:
        input: OUTPUT_DIR+"/INTERVALS/whole_exome_cohort_gccontent.filtered.interval_list"
        params: dir = directory(OUTPUT_DIR+"/INTERVALS/scatter")
        output: expand(OUTPUT_DIR+"/INTERVALS/scatter/{scatter}/scattered.interval_list", scatter=SCATTER,)
        conda: "envs/gatkcondaenv.yml"
        shell: """
        gatk --java-options "-Xmx{config[JAVA_ARGS][MAX_MEMORY]} -Djava.io.tmpdir={config[TEMP_DIR]}"  IntervalListTools --SUBDIVISION_MODE BALANCING_WITHOUT_INTERVAL_SUBDIVISION --SCATTER_COUNT 4 --INPUT {input} --OUTPUT {params.dir}
        """

def germline_conf(wildcards):
    if MODE == "CASE":
        dic = { 'mode' : MODE+' --model '+MODEL_DIR+'/'+list({wildcards.fragment})[0]+'-model' }
    elif MODE == "COHORT":
        dic = { 'mode' : MODE+' --annotated-intervals '+OUTPUT_DIR+'/INTERVALS/whole_exome_annotated_intervals.tsv --interval-merging-rule OVERLAPPING_ONLY -L '+OUTPUT_DIR+'/INTERVALS/scatter/'+list({wildcards.fragment})[0]+'/scattered.interval_list' }
    return dic

rule GERMLINE_CNV_CALLER:
    input: interval = OUTPUT_DIR+"/INTERVALS/scatter/{fragment}/scattered.interval_list", tsv = expand(OUTPUT_DIR+"/COUNTS/count.{sample}.tsv", sample=SAMPLES_NAME,), anno = OUTPUT_DIR+"/INTERVALS/whole_exome_annotated_intervals.tsv", ploidy=OUTPUT_DIR+"/ploidy-calls_chr"
    params: prefix="{fragment}",  p=germline_conf, dir=OUTPUT_DIR+"/cohort_germline_calling"
    resources: cnv_caller=1
    output: call = directory(OUTPUT_DIR+"/cohort_germline_calling/{fragment}-calls")
    conda: "envs/gatkcondaenv.yml"
    shell: """
        export MKL_NUM_THREADS={config[GERMLINE_CNV_CALLER_CPU]}
        export OMP_NUM_THREADS={config[GERMLINE_CNV_CALLER_CPU]}

        mkdir {config[TEMP_DIR]}"/COMPILEDIR_{wildcards.fragment}"
        echo -e "[global]\nbase_compiledir = "{config[TEMP_DIR]}"/COMPILEDIR_{wildcards.fragment}" > {config[TEMP_DIR]}"/THEANORC_{wildcards.fragment}"
        export THEANORC={config[TEMP_DIR]}"/THEANORC_"{wildcards.fragment}

        a=""
        for i in {input.tsv}; do a=$a" -I "$i; done
        gatk --java-options "-Xmx{config[JAVA_ARGS][MAX_MEMORY]} -Djava.io.tmpdir={config[TEMP_DIR]}" GermlineCNVCaller \
        --run-mode {params.p[mode]} \
        $a \
        --contig-ploidy-calls {input.ploidy}/ploidy-calls \
        --output {params.dir} \
        --output-prefix {params.prefix} \
        --verbosity DEBUG

        rm -r {config[TEMP_DIR]}"/COMPILEDIR_{wildcards.fragment}"
        """


def index(sample):
    for i in glob.glob(OUTPUT_DIR+"/cohort_germline_calling/temp_0001_of_4-calls/SAMPLE_*/sample_name.txt"):
        file=open(i,'r')
        for line in file:
           if line.rstrip() == sample: 
               return i.split('/')[-2].split('_')[1]

rule POSTPROCESS:
        input: sam = OUTPUT_DIR+"/COUNTS/count.{sample}.tsv", model=expand(MODEL_DIR+"/{scatter}-model", scatter = SCATTER,), calls=expand(OUTPUT_DIR+"/cohort_germline_calling/{scatter}-calls", scatter = SCATTER,)
        output: int = OUTPUT_DIR+"/VCF/{sample}.intervals.vcf.gz", seg = OUTPUT_DIR+"/VCF/{sample}.segments.vcf.gz", den = OUTPUT_DIR+"/VCF/{sample}.denoise"
        params: id = lambda wildcards: index(wildcards.sample), ploidy_path = OUTPUT_DIR+"/ploidy-calls_chr/ploidy-calls/", dict = HGDICT,
                modelfiles = lambda wildcards, input: " --model-shard-path ".join(input.model),
                callsfiles = lambda wildcards, input: " --calls-shard-path ".join(input.calls),
        conda: "envs/gatkcondaenv.yml"
        shell: """
        export MKL_NUM_THREADS=1
        export OMP_NUM_THREADS=1
        gatk --java-options "-Xmx{config[JAVA_ARGS][MAX_MEMORY]} -Djava.io.tmpdir={config[TEMP_DIR]}" PostprocessGermlineCNVCalls \
        --model-shard-path {params.modelfiles} \
        --calls-shard-path {params.callsfiles} \
        --allosomal-contig chrX --allosomal-contig chrY \
        --contig-ploidy-calls {params.ploidy_path} \
        --sample-index {params.id} \
        --output-genotyped-intervals {output.int} \
        --output-genotyped-segments {output.seg} \
        --output-denoised-copy-ratios {output.den} \
        --sequence-dictionary {params.dict}
        """
	
rule DATABASE:
	input: expand(OUTPUT_DIR+"/VCF/{sample}.segments.vcf.gz", sample=SAMPLES_NAME,)
	params: DATABASE_PATH
	output: temp(OUTPUT_DIR+"/database.tab")
	script: "Scripts/gatk4_cnv_database_file_snakemake.py"
		
rule BED_SORT:
	input: OUTPUT_DIR+"/database.tab"
	output: DATABASE_PATH
	shell: """
	echo -e "#CHR\tSTART\tSTOP\tCNV\tNUMBER\tSAMPLES" > {output}
	sort -V -k1,1 -k 2,2 {input} >> {output}
	"""

rule FILTER_VCF:
	input: database=rules.BED_SORT.output, samples=OUTPUT_DIR+"/VCF/{sample}.segments.vcf.gz"
	output: OUTPUT_DIR+"/VCF/{sample}.segments_filtered.vcf.gz"
	script: "Scripts/VCF_CNV_GATK4_denovo_annotate_filter.py" 

rule ANNOT_VCF:
	input: OUTPUT_DIR+"/VCF/{sample}.segments_filtered.vcf.gz", omim = OMIM, refseq = REFSEQ, gnomad = GNOMAD
	output: OUTPUT_DIR+"/ANNO/{sample}.segments_filtered_anno.tab"
	script: "Scripts/Script_annotation_GATK4_exome_CNV_1.0_standalone.py"

rule MERGE_CNVS:
	input: expand(OUTPUT_DIR+"/ANNO/{sample}.segments_filtered_anno.tab", sample=SAMPLES_NAME,)
	output: OUTPUT_DIR+"/all_cnv_calls_anno.tab"
	shell: """
	a=0
		for i in {input}; do 
		a=$((a+1))
		if [ $a -eq "1" ];
		then 
			cat $i > {output}
		else
			tail -n +2 $i >> {output}
		fi
		done
	"""
